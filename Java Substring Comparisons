We define the following terms:

Lexicographical Order, also known as alphabetic or dictionary order, orders characters as follows:
For example, ball < cat, dog < dorm, Happy < happy, Zoo < ball.

A substring of a string is a contiguous block of characters in the string. For example, the substrings of abc are a, b, c, ab, bc, and abc.
Given a string, , and an integer, , complete the function so that it finds the lexicographically smallest and largest substrings of length .

Function Description

Complete the getSmallestAndLargest function in the editor below.

getSmallestAndLargest has the following parameters:

string s: a string
int k: the length of the substrings to find
Returns

string: the string ' + "\n" + ' where and are the two substrings
Input Format

The first line contains a string denoting .
The second line contains an integer denoting .

Constraints

 consists of English alphabetic letters only (i.e., [a-zA-Z]).
Sample Input 0

welcometojava
3
Sample Output 0

ava
wel
Explanation 0

String  has the following lexicographically-ordered substrings of length :

We then return the first (lexicographically smallest) substring and the last (lexicographically largest) substring as two newline-separated values (i.e., ava\nwel).

The stub code in the editor then prints ava as our first line of output and wel as our second line of outpu

=============================================================================================================================================================================


Explaination

1 lexicographically means alphbatic showd first words joice and langth k=3

for example welcometojava

ava,   com,elc,eto,jav,lco,met,oja,ome,toj, wel
largest                                     smallest
welcometojava I/P String substric length  k=3
0123456789112
          0112
Take another variable so starking 3 of length wel
agter taking start and  end  means largest and smallest
so itrate loop first to last postion
so not take starting postion 0 means w it shoutake 1 means e
so always you should end point -1 so k=3 meas 3-1=2 so you use condintion -k
so in substring taking start to 1, end to i+k  its xompare the smallest and largest substring
so after comapreTo method smallest and largest  

=============================================


import java.util.Scanner;

public class Solution {

    public static String getSmallestAndLargest(String s, int k) {
        String str=s.substring(0,k); Adding bewlow code
        String smallest = str;
        String largest = str;
        
      for (int i=1; i<=s.length()-k; i++){
          str=s.substring(i, i+k);// elc
          
         if (str.compareTo(smallest) < 0){
              smallest = str;
         }
            
        if (str.compareTo(largest) > 0){
             largest = str;
        }     
          
      }
        
        // Complete the function
        // 'smallest' must be the lexicographically smallest substring of length 'k'
        // 'largest' must be the lexicographically largest substring of length 'k'
        
        return smallest + "\n" + largest;
    }


    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.next();
        int k = scan.nextInt();
        scan.close();
      
        System.out.println(getSmallestAndLargest(s, k));
    }
}
